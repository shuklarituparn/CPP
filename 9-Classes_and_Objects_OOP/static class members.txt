Class data members can be declared as static
    *A single data memeber that belongs to the class, not the objects
    *Useful to store class-wide information

Class function can be declared as static
    *Independent of any objects
    *Can be called using the class name

Player class-static members

    class Players {

        private: 
            static int num_players;

        public: 
            static int get_num_players();
    }

*****************************************************************************************
Player class- initialize the static data 

Typically in Player.cpp

#include "Player.h"

int Player::num_players= 0;

******************************************************************************************

We can define class members static using static keyword. 
When we declare a member of a class as static it means no matter 
how many objects of the class are created, there is only one copy of the static member.

A static member is shared by all objects of the class. 
All static data is initialized to zero when the first object is created, 
if no other initialization is present. We can't put it in the class definition but it
can be initialized outside the class as done in the following example by redeclaring the 
static variable, using the scope resolution operator :: to identify which class it belongs

*****************************************************************************************
  CODE 
  
#include <iostream>
 
using namespace std;

    class Box {

     public:
      static int objectCount;
      
      // Constructor definition
      Box(double l = 2.0, double b = 2.0, double h = 2.0) {
         cout <<"Constructor called." << endl;
         length = l;
         breadth = b;
         height = h;
         
         // Increase every time object is created
         objectCount++;
      }
      double Volume() {
         return length * breadth * height;
      }
      
   private:
      double length;     // Length of a box
      double breadth;    // Breadth of a box
      double height;     // Height of a box
};

// Initialize static member of class Box
int Box::objectCount = 0;

int main(void) {
   Box Box1(3.3, 1.2, 1.5);    // Declare box1
   Box Box2(8.5, 6.0, 2.0);    // Declare box2

   // Print total number of objects.
   cout << "Total objects: " << Box::objectCount << endl;

   return 0;
}
******************************************************************************************

STATIC FUNCTION MEMBERS 


#include <iostream>
 
using namespace std;

class Box {
   public:
      static int objectCount;
      
      // Constructor definition
      Box(double l = 2.0, double b = 2.0, double h = 2.0) {
         cout <<"Constructor called." << endl;
         length = l;
         breadth = b;
         height = h;

         // Increase every time object is created
         objectCount++;
      }
      double Volume() {
         return length * breadth * height;
      }
      static int getCount() {
         return objectCount;
      }
      
   private:
      double length;     // Length of a box
      double breadth;    // Breadth of a box
      double height;     // Height of a box
};

// Initialize static member of class Box
int Box::objectCount = 0;

int main(void) {
   // Print total number of objects before creating object.
   cout << "Inital Stage Count: " << Box::getCount() << endl;

   Box Box1(3.3, 1.2, 1.5);    // Declare box1
   Box Box2(8.5, 6.0, 2.0);    // Declare box2

   // Print total number of objects after creating object.
   cout << "Final Stage Count: " << Box::getCount() << endl;

   return 0;
}



By declaring a function member as static, you make it independent of any particular 
object of the class. A static member function can be called even if no objects of the 
class exist and the static functions are accessed using only the class name and the scope 
resolution operator ::.

A static member function can only access static data member, other static member 
functions and any other functions from outside the class.

Static member functions have a class scope and they do not have access to the this 
pointer of the class. You could use a static member function to determine whether some 
objects of the class have been created or not.

Let us try the following example to understand the concept of static function members
 âˆ’


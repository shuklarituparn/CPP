Constructors in C++

Constructor in C++ is a special method that is invoked automatically at the time 
of object creation. It is used to initialize the data members of new objects generally.
The constructor in C++ has the same name as the class or structure. 
Constructor is invoked at the time of object creation. 
It constructs the values i.e. provides data for the object which is why it is known 
as constructors.

Constructor does not have a return value, hence they do not have a return type.

The prototype of Constructors is as follows:

<class-name> (list-of-parameters);

******Constructors can be defined inside or outside the class declaration:-*********

The syntax for defining the constructor within the class:

<class-name> (list-of-parameters) { // constructor definition }

*********The syntax for defining the constructor outside the class:**************

<class-name>: :<class-name> (list-of-parameters){ // constructor definition}
*************************************************************************************

// defining the constructor within the class

#include <iostream>
using namespace std;

class student {
	int rno;
	char name[10];
	double fee;

public:
	student()
	{
		cout << "Enter the RollNo:";
		cin >> rno;
		cout << "Enter the Name:";
		cin >> name;
		cout << "Enter the Fee:";
		cin >> fee;
	}

	void display()
	{
		cout << endl << rno << "\t" << name << "\t" << fee;
	}
};

int main()
{
	student s; // constructor gets called automatically when
			// we create the object of the class
	s.display();

	return 0;
}

///////////////////////////////////////////////////////////////////////////////////////

A constructor in C++ is a special ‘MEMBER FUNCTION’ having the same name as that of 
its class which is used to initialize some valid values to the data members of an object
It is executed automatically whenever an object of a class is created.

The only restriction that applies to the constructor is that it must not have a 
return type or void. It is because the constructor is automatically called by the
compiler and it is normally used to INITIALIZE VALUES. The compiler distinguishes
the constructor from other member functions of a class by its name which is the 
same as that of its class. ctorz is an abbreviation of constructor in C++.

////////////////////////////////////////////////////////////////////////////////////////

Types of Constructors

1. Default Constructors: Default constructor is the constructor which doesn’t
take any argument. It has no parameters. It is also called a zero-argument constructor.

// Example
#include<iostream>
using namespace std;
class student
{
	int rno;
	char name[50];
	double fee;
	public:
	student()					 // Explicit Default constructor
	{
		cout<<"Enter the RollNo:";
		cin>>rno;
		cout<<"Enter the Name:";
		cin>>name;
		cout<<"Enter the Fee:";
		cin>>fee;
	}
	
	void display()
	{
		cout<<endl<<rno<<"\t"<<name<<"\t"<<fee;
	}
};

int main()
{
	student s;
	s.display();
	return 0;
}

2. Parameterized Constructors: It is possible to pass arguments to constructors. 
Typically, these arguments help initialize an object when it is created. 
To create a parameterized constructor, simply add parameters to it the way you would 
to any other function. When you define the constructor’s body, use the parameters
to initialize the object. 

// Example
#include<iostream>
using namespace std;
class student
{
	int rno;
	char name[50];
	double fee;
	public:
	student()					 // Explicit Default constructor
	{
		cout<<"Enter the RollNo:";
		cin>>rno;
		cout<<"Enter the Name:";
		cin>>name;
		cout<<"Enter the Fee:";
		cin>>fee;
	}
	
	void display()
	{
		cout<<endl<<rno<<"\t"<<name<<"\t"<<fee;
	}
};

int main()
{
	student s;
	s.display();
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////

2. Parameterized Constructors: It is possible to pass arguments to constructors.
Typically, these arguments help initialize an object when it is created. 
To create a parameterized constructor, simply add parameters to it the way you 
would to any other function. When you define the constructor’s body,
use the parameters to initialize the object. 

// CPP program to illustrate
// parameterized constructors
#include <iostream>
using namespace std;

class Point {
private:
	int x, y;

public:
	// Parameterized Constructor
	Point(int x1, int y1)
	{
		x = x1;
		y = y1;
	}

	int getX() { return x; }
	int getY() { return y; }
};

int main()
{
	// Constructor called
	Point p1(10, 15);

	// Access values assigned by constructor
	cout << "p1.x = " << p1.getX()
		<< ", p1.y = " << p1.getY();

	return 0;
}

//////////////////////////////////////////////////////////////////////////////////

// Example

#include<iostream>
#include<string.h>
using namespace std;

class student
{
	int rno;
	char name[50];
	double fee;

	public:
	student(int,char[],double);
	void display();
	
};

student::student(int no,char n[],double f)
{
	rno=no;
	strcpy(name,n);
	fee=f;
}

void student::display()
{
	cout<<endl<<rno<<"\t"<<name<<"\t"<<fee;
}
	
int main()
{
	student s(1001,"Ram",10000);
	s.display();
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
When an object is declared in a parameterized constructor, the initial values have to be passed as arguments to the constructor function. The normal way of object declaration may not work. The constructors can be called explicitly or implicitly.

 Example e = Example(0, 50); // Explicit call

 Example e(0, 50);           // Implicit call

    Uses of Parameterized constructor: 
        It is used to initialize the various data elements of different objects with different values when they are created.
        It is used to overload constructors.
    Can we have more than one constructor in a class?
           Yes, It is called Constructor Overloading.

3. Copy Constructor: 

A copy constructor is a member function that initializes an object using another object of the same class. A detailed article on Copy Constructor.

Whenever we define one or more non-default constructors( with parameters ) for a class, a default constructor( without parameters ) should also be explicitly defined as the compiler will not provide a default constructor in this case. However, it is not necessary but it’s considered to be the best practice to always define a default constructor. 

Copy constructor takes a reference to an object of the same class as an argument.

Sample(Sample &t)
          {
                     id=t.id;
          }

////////////////////////////////////////////////////////////////////////////////////////

// Illustration
#include <iostream>
using namespace std;

class point {
private:
	double x, y;

public:
	// Non-default Constructor &
	// default Constructor
	point(double px, double py) { x = px, y = py; }
};

int main(void)
{

	// Define an array of size
	// 10 & of type point
	// This line will cause error
	point a[10];

	// Remove above line and program
	// will compile without error
	point b = point(5, 6);
}
//////////////////////////////////////////////////////////////////////////////////////
Error: point (double px, double py): expects 2 arguments, 0 provided



// Example: Explicit copy constructor

#include <iostream>
using namespace std;

class Sample
{
	int id;
	public:
	void init(int x)
	{
		id=x;
	}
	Sample(){} //default constructor with empty body
	
	Sample(Sample &t) //copy constructor
	{
		id=t.id;
	}
	void display()
	{
		cout<<endl<<"ID="<<id;
	}
};
int main()
{
	Sample obj1;
	obj1.init(10);
	obj1.display();
	
	Sample obj2(obj1); //or obj2=obj1; copy constructor called
	obj2.display();
	return 0;
}


Destructor: 

A destructor is also a special member function as a constructor. Destructor destroys the class objects created by the constructor. Destructor has the same name as their class name preceded by a tilde (~) symbol. It is not possible to define more than one destructor. The destructor is only one way to destroy the object created by the constructor. Hence destructor can-not be overloaded. Destructor neither requires any argument nor returns any value. It is automatically called when the object goes out of scope.  Destructors release memory space occupied by the objects created by the constructor. In destructor, objects are destroyed in the reverse of object creation.

The syntax for defining the destructor within the class

          ~ <class-name>()
          {
            }

The syntax for defining the destructor outside the class

<class-name>: : ~ <class-name>(){}
//////////////////////////////////////////////////////////////////////////////////////



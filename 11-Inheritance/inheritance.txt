The capability of a class to derive properties and characteristics from another class is called Inheritance. Inheritance is one of the most important features of 
Object-Oriented Programming. 

Inheritance is a feature or a process in which, new classes are created from the existing classes. The new class created is called “derived class” or “child class” 
and the existing class is known as the “base class” or “parent class”. The derived class now is said to be inherited from the base class.

When we say derived class inherits the base class, it means, the derived class inherits all the properties of the base class, without changing the properties of 
base class and may add new features to its own. These new features in the derived class will not affect the base class. The derived class is the specialized class 
for the base class.

    Sub Class: The class that inherits properties from another class is called Subclass or Derived Class. 
    Super Class: The class whose properties are inherited by a subclass is called Base Class or Superclass. 

The article is divided into the following subtopics: 

    Why and when to use inheritance?
    Modes of Inheritance
    Types of Inheritance

Why and when to use inheritance?

Consider a group of vehicles. You need to create classes for Bus, Car, and Truck. The methods fuelAmount(), capacity(), applyBrakes() will be the same for all 
three classes. If we create these classes avoiding inheritance then we have to write all of these functions in each of the three classes.

he above process results in duplication of the same code 3 times. This increases the chances of error and data redundancy. 
To avoid this type of situation, inheritance is used. If we create a class Vehicle and write these three functions in it and inherit the rest of the classes
from the vehicle class, then we can simply avoid the duplication of data and increase re-usability. Look at the below diagram in which the three classes are
inherited from vehicle class:
 
class  <derived_class_name> : <access-specifier> <base_class_name>
{
        //body
}

Where
class      — keyword to create a new class
derived_class_name   — name of the new class, which will inherit the base class
access-specifier  — either of private, public or protected. If neither is specified, PRIVATE is taken as default
base-class-name  — name of the base class
Note: A derived class doesn’t inherit access to private data members. However, it does inherit a full parent object, which contains any private members which that class declares.

Example:
1. class ABC : private XYZ              //private derivation
            {                }
2. class ABC : public XYZ              //public derivation
            {               }
3. class ABC : protected XYZ              //protected derivation
            {              }
4. class ABC: XYZ                            //private derivation by default
{            }


Note:

o When a base class is privately inherited by the derived class, public members of the base class becomes the private members of the derived class and therefore, 
the public members of the base class can only be accessed by the member functions of the derived class. They are inaccessible to the objects of the derived class.

o On the other hand, when the base class is publicly inherited by the derived class, public members of the base class also become the public members of the derived 
class. Therefore, the public members of the base class are accessible by the objects of the derived class as well as by the member functions of the derived class.
 
Types of Inheritance in C++

1. Single Inheritance: In single inheritance, a class is allowed to inherit from only one class. i.e. one subclass is inherited by one base class only.

Syntax: 

class subclass_name : access_mode base_class
{
  // body of subclass
};

OR

class A
{ 
... .. ... 
};

class B: public A
{
... .. ...
};



/////////////////////////////////////////////
// C++ program to explain
// Single inheritance
#include<iostream>
using namespace std;

// base class
class Vehicle {
public:
	Vehicle()
	{
	cout << "This is a Vehicle\n";
	}
};

// sub class derived from a single base classes
class Car : public Vehicle {

};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base classes
	Car obj;
	return 0;
}
/////////////////////////////////////////////

// Example:

#include<iostream>
using namespace std;

class A
{
	protected:
	int a;
	
	public:
		void set_A()
		{
			cout<<"Enter the Value of A=";
			cin>>a;
			
		}
		void disp_A()
		{
			cout<<endl<<"Value of A="<<a;
		}
};


class B: public A
{
	int b,p;
	
	public:
		void set_B()
		{
			set_A();
			cout<<"Enter the Value of B=";
			cin>>b;
		}
		
		void disp_B()
		{
			disp_A();
			cout<<endl<<"Value of B="<<b;
		}
		
		void cal_product()
		{
			p=a*b;
			cout<<endl<<"Product of "<<a<<" * "<<b<<" = "<<p;
		}
		
};

main()
{
	
	B _b;
	_b.set_B();
	_b.cal_product();
	
	return 0;
	
}
///////////////////////////////////////////////////////////////
